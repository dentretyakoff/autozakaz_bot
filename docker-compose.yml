services:
  db:
    image: postgres:16
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      start_period: 30s
      timeout: 10s
      interval: 5s
      retries: 10
    env_file: .env
    volumes:
      - pg_data:/var/lib/postgresql/data
    expose:
      - 5432

  backend:
    build:
      context: ./backend
    restart: always
    env_file:
      - .env
    environment:
      - REDIS_HOST=redis
      - DB_HOST=db
      - DEBUG=False
      - MEILI_HOST=meilisearch
    command: >
      sh -c "
        python manage.py migrate &&
        python manage.py collectstatic --noinput &&
        python manage.py create_admin &&
        python manage.py create_bot_user &&
        cp -r /app/collected_static/. /backend_static/ &&
        gunicorn --bind 0.0.0.0:8000 core.wsgi"
    depends_on:
      db:
        condition: service_healthy
      meilisearch: 
        condition: service_healthy
    expose:
      - 8000
    volumes:
      - static:/backend_static
      - media:/app/media_files

  meilisearch:
    image: getmeili/meilisearch
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7700/health"]
      interval: 30s
      timeout: 5s
      retries: 5
    env_file:
      - .env
    volumes:
      - meili_data:/meili_data


  celery-worker-backend:
    build:
      context: ./backend
    restart: always
    command: celery -A core worker --loglevel=info
    env_file:
      - .env
    environment:
      - REDIS_HOST=redis
      - DB_HOST=db
      - DEBUG=False
      - MEILI_HOST=meilisearch
    depends_on:
      backend:
        condition: service_started
      redis:
        condition: service_healthy
    volumes:
      - celery_data:/app/temp

  celery-beat-backend:
    build:
      context: ./backend
    restart: always
    command: celery -A core beat --loglevel=info
    env_file:
      - .env
    environment:
      - REDIS_HOST=redis
      - DB_HOST=db
      - DEBUG=False
      - MEILI_HOST=meilisearch
    depends_on:
      backend:
        condition: service_started
      redis:
        condition: service_healthy

  nginx:
    image: nginx:latest
    restart: always
    volumes:
      - ./gateway/default.conf:/etc/nginx/conf.d/default.conf:ro
      - static:/static
      - media:/media_files
    depends_on:
      - backend
    ports:
      - "8080:80"

  redis:
    image: redis:alpine
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s
      timeout: 3s
      retries: 30
    expose:
      - 6379
    volumes:
      - redis_data:/data

  bot:
    build:
      context: ./bot
    restart: always
    command: python main.py
    env_file:
      - .env
    environment:
      - BACKEND_API_URL=http://backend:8000
    depends_on:
      - backend

volumes:
  pg_data:
  redis_data:
  static:
  media:
  meili_data:
  celery_data:
