import logging

from aiogram.types import Message, CallbackQuery
from aiogram.exceptions import TelegramBadRequest

from core.constants import MessagesConstants, MAX_LEN_DESCRIPTION

logger = logging.getLogger(__name__)


def make_message_contacts(contacts: dict) -> str:
    """–ü–æ–¥–≥–æ—Ç–æ–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏."""
    if not contacts:
        return MessagesConstants.CONTACTS

    text = ''
    for contact in contacts.values():
        text += contact
        text += '\n\n'

    return text


def make_product_text(product: dict) -> str:
    """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ —Ç–æ–≤–∞—Ä–µ."""
    text = ''
    text += f'üè∑ {product.get("name")}\n\n'
    text += f'üè≠ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: {product.get("manufacturer")}\n'
    text += f'üåê –ö–æ–¥: {product.get("code")}\n'
    text += f'üî§ –ê—Ä—Ç–∏–∫—É–ª: {product.get("product_code")}\n\n'
    description = product.get("description")
    if description:
        text += f'üìñ –û–ø–∏—Å–∞–Ω–∏–µ:\n{description[:MAX_LEN_DESCRIPTION]}\n\n'
    text += f'üïê –°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏(—Ä–∞–±–æ—á–∏–µ –¥–Ω–∏): {product.get("period_min")}\n\n'
    text += f'üí∞ –¶–µ–Ω–∞: {product.get("price")} ‚ÇΩ\n'
    return text


async def delete_previous_message(
        message_id: int,
        message: Message | CallbackQuery = None) -> None:
    try:
        await message.bot.delete_message(
            chat_id=message.chat.id,
            message_id=message_id)
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')


async def safe_delete_message(message: Message) -> None:
    try:
        await message.delete()
    except TelegramBadRequest as e:
        text = str(e).lower()
        if "message can't be deleted for everyone" in text:
            logger.info('–ù–µ –º–æ–≥—É —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.')
        else:
            logger.warning(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
